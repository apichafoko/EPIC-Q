generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model activity_logs {
  id         String   @id
  userId     String
  action     String
  details    String?
  ipAddress  String?
  userAgent  String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model alerts {
  id            String    @id
  hospital_id   String
  project_id    String?   // NUEVO
  type          String
  title         String
  message       String
  severity      String    @default("medium") // NUEVO: critical|high|medium|low
  metadata      Json?     // NUEVO: contexto específico
  is_resolved   Boolean   @default(false)
  resolved_at   DateTime?
  resolved_by   String?   // NUEVO: user_id que resolvió
  auto_resolved Boolean   @default(false) // NUEVO
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  
  hospitals     hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects      projects? @relation(fields: [project_id], references: [id], onDelete: Cascade)
  resolver      users?    @relation("AlertResolver", fields: [resolved_by], references: [id])
  communications communications[]
}

model case_metrics {
  id                    String    @id
  hospital_id           String
  recorded_date         DateTime
  cases_created         Int       @default(0)
  completion_percentage Int       @default(0)
  last_case_date        DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  hospitals             hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model communication_templates {
  id               String   @id
  name             String   @unique
  description      String?
  type             String   @default("internal")
  category         String   @default("general")
  is_active        Boolean  @default(true)
  usage_count      Int      @default(0)
  internal_subject String?
  internal_body    String?
  email_subject    String?
  email_body       String?
  variables        String[] @default([])
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
}

model communications {
  id            String     @id
  hospital_id   String?
  project_id    String?
  user_id       String     // Destinatario (coordinador)
  sender_id     String?    // NUEVO: admin que envió (manuales)
  alert_id      String?    // NUEVO: si viene de alerta
  type          String     // manual | auto_alert | system
  subject       String
  body          String
  channels      Json       // NUEVO: ['email', 'in_app', 'push']
  email_status  String?    // NUEVO: sent | failed | delivered
  read_at       DateTime?  // NUEVO
  sent_at       DateTime   @default(now())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  
  hospitals     hospitals? @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects      projects?  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  recipient     users      @relation("CommunicationRecipient", fields: [user_id], references: [id], onDelete: Cascade)
  sender        users?     @relation("CommunicationSender", fields: [sender_id], references: [id])
  alert         alerts?    @relation(fields: [alert_id], references: [id])
}

model hospital_contacts {
  id          String    @id
  hospital_id String
  role        String
  name        String
  email       String?
  phone       String?
  specialty   String?
  is_primary  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  hospitals   hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model hospital_details {
  id                        String    @id
  hospital_id               String    @unique
  director_name             String?
  director_email            String?
  director_phone            String?
  ethics_committee          String?
  ethics_committee_email    String?
  ethics_committee_phone    String?
  research_department       String?
  research_department_email String?
  research_department_phone String?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @default(now())
  avg_weekly_surgeries      Int?
  financing_type            String?
  has_preop_clinic          String?
  num_beds                  Int?
  num_icu_beds              Int?
  num_operating_rooms       Int?
  has_ethics_committee      Boolean?
  has_rapid_response_team   Boolean?
  has_residency_program     Boolean?
  notes                     String?
  university_affiliated     Boolean?
  hospitals                 hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model hospital_progress {
  id                    String             @id
  hospital_id           String
  project_id            String
  status                String             @default("pending")
  progress_percentage   Int                @default(0)
  notes                 String?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  project_hospital_id   String?            @unique
  ethics_approved       Boolean?
  ethics_approved_date  DateTime?
  ethics_submitted      Boolean?
  ethics_submitted_date DateTime?
  hospitals             hospitals          @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  project_hospitals     project_hospitals? @relation(fields: [project_hospital_id], references: [id])
}

model hospitals {
  id                   String                 @id
  name                 String
  province             String
  city                 String
  address              String?
  phone                String?
  email                String?
  website              String?
  bed_count            Int?
  lasos_participation  Boolean?
  status               String                 @default("active")
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  alerts               alerts[]
  case_load_statistics case_load_statistics[]
  case_metrics         case_metrics[]
  communications       communications[]
  hospital_contacts    hospital_contacts[]
  hospital_details     hospital_details?
  hospital_progress    hospital_progress[]
  project_coordinators project_coordinators[]
  project_hospitals    project_hospitals[]
  users                users[]
}

model notifications {
  id         String    @id
  userId     String
  title      String
  message    String
  type       String    @default("info")
  isRead     Boolean   @default(false)
  readAt     DateTime?
  created_at DateTime  @default(now())
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model project_coordinators {
  id               String    @id
  project_id       String
  hospital_id      String
  user_id          String
  is_active        Boolean   @default(true)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  accepted_at      DateTime?
  invited_at       DateTime  @default(now())
  invitation_token String?
  role             String    @default("coordinator")
  hospitals        hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects         projects  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([project_id, hospital_id, user_id])
}

model project_hospitals {
  id                     String                @id
  project_id             String
  hospital_id            String
  status                 String                @default("pending")
  redcap_id              String?
  ethics_committee       String?
  ethics_committee_email String?
  ethics_committee_phone String?
  created_at             DateTime              @default(now())
  updated_at             DateTime              @default(now())
  hospital_progress      hospital_progress?
  hospitals              hospitals             @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects               projects              @relation(fields: [project_id], references: [id], onDelete: Cascade)
  recruitment_periods    recruitment_periods[]

  @@unique([project_id, hospital_id])
}

model projects {
  id                   String                 @id
  name                 String
  description          String?
  brief_description    String?                @db.Text
  status               String                 @default("active")
  start_date           DateTime?
  end_date             DateTime?
  required_periods     Int                    @default(1)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  case_load_statistics case_load_statistics[]
  communications       communications[]
  project_coordinators project_coordinators[]
  project_hospitals    project_hospitals[]
  alerts               alerts[]
  resources            project_resources[]
}

model recruitment_periods {
  id                   String                 @id
  start_date           DateTime
  end_date             DateTime
  target_cases         Int?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  period_number        Int
  project_hospital_id  String
  case_load_statistics case_load_statistics[]
  project_hospitals    project_hospitals      @relation(fields: [project_hospital_id], references: [id], onDelete: Cascade)

  @@unique([project_hospital_id, period_number])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_settings {
  id                 String   @id
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  language           String   @default("es")
  timezone           String?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
  users              users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                   String                 @id
  email                String                 @unique
  name                 String?
  password             String
  role                 String                 @default("coordinator")
  hospitalId           String?
  emailVerified        DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  lastLogin            DateTime?
  isActive             Boolean                @default(true)
  isTemporaryPassword  Boolean                @default(false)
  preferredLanguage    String                 @default("es")
  timezone             String?
  country              String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now())
  accounts             accounts[]
  activity_logs        activity_logs[]
  notifications        notifications[]
  project_coordinators project_coordinators[]
  sessions             sessions[]
  user_settings        user_settings?
  hospitals            hospitals?             @relation(fields: [hospitalId], references: [id])
  
  // Relaciones para sistema de alertas y comunicaciones
  sent_communications      communications[] @relation("CommunicationSender")
  received_communications  communications[] @relation("CommunicationRecipient")
  resolved_alerts          alerts[]         @relation("AlertResolver")
  notification_preferences notification_preferences[]
  created_resources        project_resources[]
}

model case_load_statistics {
  id                   String              @id @default(cuid())
  project_id           String
  hospital_id          String
  period_id            String
  cases_loaded         Int                 @default(0)
  cases_expected       Int?
  last_load_date       DateTime?
  is_currently_loading Boolean             @default(false)
  loading_status       String?
  notes                String?
  created_at           DateTime            @default(now())
  updated_at           DateTime            @default(now())
  hospitals            hospitals           @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  recruitment_periods  recruitment_periods @relation(fields: [period_id], references: [id], onDelete: Cascade)
  projects             projects            @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@unique([project_id, hospital_id, period_id])
}

model alert_configurations {
  id                String   @id @default(cuid())
  alert_type        String   @unique // ethics_approval_pending, etc.
  enabled           Boolean  @default(true)
  notify_admin      Boolean  @default(true)
  notify_coordinator Boolean @default(true)
  auto_send_email   Boolean  @default(false)
  threshold_value   Int?     // Para alertas con umbral (días, porcentaje, etc.)
  email_template_id String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
}

model notification_preferences {
  id             String   @id @default(cuid())
  user_id        String
  alert_type     String
  email_enabled  Boolean  @default(true)
  push_enabled   Boolean  @default(true)
  in_app_enabled Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, alert_type])
}

model push_subscriptions {
  id          String   @id @default(cuid())
  endpoint    String   @unique
  p256dh_key  String
  auth_key    String
  user_agent  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("push_subscriptions")
}

model project_resources {
  id          String   @id @default(cuid())
  project_id  String
  title       String
  description String?  @db.Text
  type        String   // 'pdf', 'video_youtube', 'video_file', 'link', 'document'
  url         String   @db.Text // URL de S3 o link externo
  s3_key      String?  // Key de S3 para archivos subidos
  file_size   Int?     // Tamaño en bytes
  mime_type   String?  // Tipo de archivo
  order       Int      @default(0) // Orden de visualización
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  String
  
  project     projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  creator     users    @relation(fields: [created_by], references: [id])
  
  @@index([project_id])
  @@map("project_resources")
}
