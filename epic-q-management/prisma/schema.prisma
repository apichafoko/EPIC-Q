generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model activity_logs {
  id         String   @id
  userId     String
  action     String
  details    String?
  ipAddress  String?
  userAgent  String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model alerts {
  id          String    @id
  hospital_id String
  type        String
  title       String
  message     String
  is_resolved Boolean   @default(false)
  resolved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime
  hospitals   hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model case_metrics {
  id                    String    @id
  hospital_id           String
  recorded_date         DateTime
  cases_created         Int       @default(0)
  completion_percentage Int       @default(0)
  last_case_date        DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime
  hospitals             hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model communication_templates {
  id               String   @id
  name             String   @unique
  description      String?
  type             String   @default("internal")
  category         String   @default("general")
  is_active        Boolean  @default(true)
  usage_count      Int      @default(0)
  internal_subject String?
  internal_body    String?
  email_subject    String?
  email_body       String?
  variables        String[] @default([])
  created_at       DateTime @default(now())
  updated_at       DateTime
}

model communications {
  id          String     @id
  hospital_id String?
  project_id  String?
  user_id     String?
  type        String
  subject     String
  body        String
  sent_at     DateTime   @default(now())
  created_at  DateTime   @default(now())
  updated_at  DateTime
  hospitals   hospitals? @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects    projects?  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  users       users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model hospital_contacts {
  id          String    @id
  hospital_id String
  role        String
  name        String
  email       String?
  phone       String?
  specialty   String?
  is_primary  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime
  hospitals   hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model hospital_details {
  id                        String    @id
  hospital_id               String    @unique
  director_name             String?
  director_email            String?
  director_phone            String?
  ethics_committee          String?
  ethics_committee_email    String?
  ethics_committee_phone    String?
  research_department       String?
  research_department_email String?
  research_department_phone String?
  created_at                DateTime  @default(now())
  updated_at                DateTime
  hospitals                 hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
}

model hospital_progress {
  id                  String             @id
  hospital_id         String
  project_id          String
  status              String             @default("pending")
  progress_percentage Int                @default(0)
  notes               String?
  created_at          DateTime           @default(now())
  updated_at          DateTime
  project_hospital_id String?            @unique
  hospitals           hospitals          @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  project_hospitals   project_hospitals? @relation(fields: [project_hospital_id], references: [id])
}

model hospitals {
  id                   String                 @id
  name                 String
  province             String
  city                 String
  address              String?
  phone                String?
  email                String?
  website              String?
  bed_count            Int?
  lasos_participation  Boolean                @default(false)
  status               String                 @default("active")
  created_at           DateTime               @default(now())
  updated_at           DateTime
  alerts               alerts[]
  case_metrics         case_metrics[]
  communications       communications[]
  hospital_contacts    hospital_contacts[]
  hospital_details     hospital_details?
  hospital_progress    hospital_progress[]
  project_coordinators project_coordinators[]
  project_hospitals    project_hospitals[]
  users                users[]
}

model notifications {
  id         String    @id
  userId     String
  title      String
  message    String
  type       String    @default("info")
  isRead     Boolean   @default(false)
  readAt     DateTime?
  created_at DateTime  @default(now())
  users      users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model project_coordinators {
  id          String    @id
  project_id  String
  hospital_id String
  user_id     String
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime
  hospitals   hospitals @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects    projects  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([project_id, hospital_id, user_id])
}

model project_hospitals {
  id                     String                @id
  project_id             String
  hospital_id            String
  status                 String                @default("pending")
  redcap_id              String?
  ethics_committee       String?
  ethics_committee_email String?
  ethics_committee_phone String?
  created_at             DateTime              @default(now())
  updated_at             DateTime
  hospital_progress      hospital_progress?
  hospitals              hospitals             @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  projects               projects              @relation(fields: [project_id], references: [id], onDelete: Cascade)
  recruitment_periods    recruitment_periods[]

  @@unique([project_id, hospital_id])
}

model projects {
  id                   String                 @id
  name                 String
  description          String?
  status               String                 @default("active")
  start_date           DateTime?
  end_date             DateTime?
  required_periods     Int                    @default(1)
  created_at           DateTime               @default(now())
  updated_at           DateTime
  communications       communications[]
  project_coordinators project_coordinators[]
  project_hospitals    project_hospitals[]
}

model recruitment_periods {
  id                  String            @id
  start_date          DateTime
  end_date            DateTime
  target_cases        Int?
  created_at          DateTime          @default(now())
  updated_at          DateTime
  period_number       Int
  project_hospital_id String
  project_hospitals   project_hospitals @relation(fields: [project_hospital_id], references: [id], onDelete: Cascade)

  @@unique([project_hospital_id, period_number])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user_settings {
  id                 String   @id
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  language           String   @default("es")
  timezone           String?
  created_at         DateTime @default(now())
  updated_at         DateTime
  users              users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                   String                 @id
  email                String                 @unique
  name                 String?
  password             String
  role                 String                 @default("coordinator")
  hospitalId           String?
  emailVerified        DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  lastLogin            DateTime?
  isActive             Boolean                @default(true)
  isTemporaryPassword  Boolean                @default(false)
  preferredLanguage    String                 @default("es")
  timezone             String?
  country              String?
  created_at           DateTime               @default(now())
  updated_at           DateTime
  accounts             accounts[]
  activity_logs        activity_logs[]
  communications       communications[]
  notifications        notifications[]
  project_coordinators project_coordinators[]
  sessions             sessions[]
  user_settings        user_settings?
  hospitals            hospitals?             @relation(fields: [hospitalId], references: [id])
}
